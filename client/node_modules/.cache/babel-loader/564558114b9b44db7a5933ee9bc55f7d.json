{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { SignInSuccess, SignInFailure, checkUserSession } from './user.actions.js';\nimport userActionsTypes from './user.types.js';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils.js';\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* getSnapshotFromAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionsTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionsTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionsTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* isUserAuthenticated() {}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["D:/Coding/UDEMY/Andrei/Complete React Developer in 2020/crown-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","SignInSuccess","SignInFailure","checkUserSession","userActionsTypes","auth","googleProvider","createUserProfileDocument","signInWithGoogle","user","signInWithPopup","getSnapshotFromAuth","error","signInWithEmail","payload","email","password","signInWithEmailAndPassword","userAuth","userRef","userSnapshot","get","id","data","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","isUserAuthenticated","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SACIC,aADJ,EAEIC,aAFJ,EAGIC,gBAHJ,QAIO,mBAJP;AAMA,OAAOC,gBAAP,MAA6B,iBAA7B;AACA,SACIC,IADJ,EAEIC,cAFJ,EAGIC,yBAHJ,QAIO,kCAJP;AAOA,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMJ,IAAI,CAACK,eAAL,CAAqBJ,cAArB,CAAvB;AACC,UAAMK,mBAAmB,CAACF,IAAD,CAAzB;AACJ,GAHD,CAGE,OAAMG,KAAN,EAAa;AACX,UAAMd,GAAG,CAACI,aAAa,CAACU,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA2D;AAC9D,MAAI;AACJ,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMJ,IAAI,CAACY,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACI,UAAML,mBAAmB,CAACF,IAAD,CAAzB;AACH,GAHD,CAGE,OAAMG,KAAN,EAAa;AACX,UAAMd,GAAG,CAACI,aAAa,CAACU,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUD,mBAAV,CAA8BO,QAA9B,EAAwC;AAC3C,MAAI;AACJ,UAAMC,OAAO,GAAG,MAAMnB,IAAI,CAACO,yBAAD,EAA4BW,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACI,UAAMvB,GAAG,CAACG,aAAa,CAAC;AACpBqB,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT;AAIH,GAPD,CAOE,OAAMX,KAAN,EAAa;AACX,UAAMd,GAAG,CAACI,aAAa,CAACU,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUY,mBAAV,GAAgC;AACnC,QAAM3B,UAAU,CAACO,gBAAgB,CAACqB,oBAAlB,EAAwCjB,gBAAxC,CAAhB;AACH;AAED,OAAO,UAAUkB,kBAAV,GAA+B;AAClC,QAAM7B,UAAU,CAACO,gBAAgB,CAACuB,mBAAlB,EAAuCd,eAAvC,CAAhB;AACH;AAID,OAAO,UAAUe,kBAAV,GAA+B;AAClC,QAAM/B,UAAU,CAACO,gBAAgB,CAACyB,kBAAlB,EAAsCC,mBAAtC,CAAhB;AACH;AAED,OAAO,UAAUA,mBAAV,GAAgC,CAEtC;AAID,OAAO,UAAUC,SAAV,GAAsB;AACzB,QAAMhC,GAAG,CAAC,CACFC,IAAI,CAACwB,mBAAD,CADF,EAEFxB,IAAI,CAAC0B,kBAAD,CAFF,CAAD,CAAT;AAIH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport { \r\n    SignInSuccess,\r\n    SignInFailure,\r\n    checkUserSession\r\n} from './user.actions.js';\r\n\r\nimport userActionsTypes from './user.types.js';\r\nimport { \r\n    auth, \r\n    googleProvider,\r\n    createUserProfileDocument \r\n} from '../../firebase/firebase.utils.js';\r\n\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider)\r\n         yield getSnapshotFromAuth(user);\r\n    } catch(error) {\r\n        yield put(SignInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password }}) {\r\n    try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromAuth(user);    \r\n    } catch(error) {\r\n        yield put(SignInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* getSnapshotFromAuth(userAuth) {\r\n    try {\r\n    const userRef = yield call(createUserProfileDocument, userAuth)\r\n    const userSnapshot = yield userRef.get();\r\n        yield put(SignInSuccess({ \r\n            id: userSnapshot.id, \r\n            ...userSnapshot.data()\r\n        }))\r\n    } catch(error) {\r\n        yield put(SignInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(userActionsTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(userActionsTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\n\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(userActionsTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n\r\n}\r\n\r\n\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n            call(onGoogleSignInStart),\r\n            call(onEmailSignInStart)\r\n            ])\r\n}"]},"metadata":{},"sourceType":"module"}